## Stage 1: Instruction Processing

Convert the following user instructions into structured deployment instructions and predict the required PSADT cmdlets.

### Example 1: Install with Registry Key Creation

**User Instructions:**
"Silently install the application and create a registry key at 'HKLM:\Software\MyCompany' with the name 'InstallDir' and the value 'C:\Program Files\MyCompany'."

**Application Metadata:**
- **Name**: "My App"
- **Version**: "1.2.3"
- **File Type**: "msi"
- **Architecture**: "x64"

**Expected Output:**
```json
{
  "structured_instructions": {
    "primary_action": "install",
    "installation_method": "silent",
    "custom_parameters": null,
    "prerequisites": [],
    "post_install_actions": [
      {
        "type": "set_registry_key",
        "key": "HKLM:\\Software\\MyCompany",
        "name": "InstallDir",
        "value": "C:\\Program Files\\MyCompany"
      }
    ],
    "special_requirements": []
  },
  "predicted_cmdlets": [
    "Start-ADTMsiProcess",
    "Write-ADTLogEntry",
    "Set-ADTRegistryKey"
  ],
  "confidence_score": 0.95
}
```

### Example 2: Interactive Install with a Custom Parameter

**User Instructions:**
"Install the app interactively and set the server address to 'prod.server.com'."

**Application Metadata:**
- **Name**: "Client Tool"
- **Version**: "2.0"
- **File Type**: "exe"
- **Architecture**: "x86"

**Expected Output:**
```json
{
  "structured_instructions": {
    "primary_action": "install",
    "installation_method": "interactive",
    "custom_parameters": "SERVER_ADDRESS=prod.server.com",
    "prerequisites": [],
    "post_install_actions": [],
    "special_requirements": []
  },
  "predicted_cmdlets": [
    "Show-ADTInstallationWelcome",
    "Start-ADTProcess",
    "Write-ADTLogEntry"
  ],
  "confidence_score": 0.90
}
```

### Example 3: Silent Install with Process Closure (Firefox)

**User Instructions:**
"Silently install Mozilla Firefox."

**Application Metadata:**
- **Name**: "Mozilla Firefox"
- **Version**: "139.0.1"
- **File Type**: "msi"
- **Architecture**: "x64"

**Expected Output:**
```json
{
  "structured_instructions": {
    "primary_action": "install",
    "installation_method": "silent",
    "custom_parameters": null,
    "prerequisites": [],
    "post_install_actions": [],
    "special_requirements": []
  },
  "predicted_cmdlets": [
    "Start-ADTMsiProcess",
    "Write-ADTLogEntry",
    "Show-ADTInstallationWelcome"
  ],
  "confidence_score": 0.95,
  "predicted_processes_to_close": ["firefox.exe"]
}
```

### Example 4: Silent Install with Process Closure (Google Chrome)

**User Instructions:**
"Silently install Google Chrome."

**Application Metadata:**
- **Name**: "Google Chrome"
- **Version**: "120.0.6099.109"
- **File Type**: "msi"
- **Architecture**: "x64"

**Expected Output:**
```json
{
  "structured_instructions": {
    "primary_action": "install",
    "installation_method": "silent",
    "custom_parameters": null,
    "prerequisites": [],
    "post_install_actions": [],
    "special_requirements": []
  },
  "predicted_cmdlets": [
    "Start-ADTMsiProcess",
    "Write-ADTLogEntry",
    "Show-ADTInstallationWelcome"
  ],
  "confidence_score": 0.95,
  "predicted_processes_to_close": ["chrome.exe"]
}
```

### Example 5: Silent Install with Process Closure (VLC Media Player)

**User Instructions:**
"Silently install VLC Media Player."

**Application Metadata:**
- **Name**: "VLC Media Player"
- **Version**: "3.0.20"
- **File Type**: "msi"
- **Architecture**: "x64"

**Expected Output:**
```json
{
  "structured_instructions": {
    "primary_action": "install",
    "installation_method": "silent",
    "custom_parameters": null,
    "prerequisites": [],
    "post_install_actions": [],
    "special_requirements": []
  },
  "predicted_cmdlets": [
    "Start-ADTMsiProcess",
    "Write-ADTLogEntry",
    "Show-ADTInstallationWelcome"
  ],
  "confidence_score": 0.95,
  "predicted_processes_to_close": ["vlc.exe"]
}
```

### Example 6: Silent Install with Process Closure (7-Zip)

**User Instructions:**
"Silently install 7-Zip."

**Application Metadata:**
- **Name**: "7-Zip"
- **Version**: "22.01"
- **File Type**: "msi"
- **Architecture**: "x64"

**Expected Output:**
```json
{
  "structured_instructions": {
    "primary_action": "install",
    "installation_method": "silent",
    "custom_parameters": null,
    "prerequisites": [],
    "post_install_actions": [],
    "special_requirements": []
  },
  "predicted_cmdlets": [
    "Start-ADTMsiProcess",
    "Write-ADTLogEntry",
    "Show-ADTInstallationWelcome"
  ],
  "confidence_score": 0.95,
  "predicted_processes_to_close": ["7zFM.exe"]
}
```

---

### Your Task

**User Instructions:**
{{ user_instructions }}

### Application Metadata
- **Name**: {{ metadata.product_name | default("Unknown Application") }}
- **Version**: {{ metadata.version | default("1.0.0") }}
- **File Type**: {{ metadata.file_type | default("msi") }}
- **Architecture**: {{ metadata.architecture | default("x86/x64") }}

### Expected Output Format
```json
{
  "structured_instructions": {
    "primary_action": "install|uninstall|repair",
    "installation_method": "silent|interactive|custom",
    "custom_parameters": "string or null",
    "prerequisites": ["list of requirements"],
    "post_install_actions": [
      {
        "type": "set_registry_key",
        "key": "string",
        "name": "string",
        "value": "string"
      }
    ],
    "special_requirements": ["list of special needs"]
  },
  "predicted_cmdlets": [
    "Start-ADTMsiProcess",
    "Show-ADTInstallationWelcome",
    "Write-ADTLogEntry"
  ],
  "confidence_score": 0.85,
  "predicted_processes_to_close": ["list of executable names"]
}
```

### PSADT v4 Cmdlet Reference
This is the list of available cmdlets. Use these to make your predictions.

{% for cmdlet in cmdlet_reference %}
- **{{ cmdlet.name }}**: {{ cmdlet.description }}
{% endfor %}

Analyze the instructions and provide structured output with predicted cmdlets.

**CRITICAL INSTRUCTIONS**:
1.  Based on the `Application Metadata` (especially `Name`), you **MUST** predict the most common executable name for the application and return it in the `predicted_processes_to_close` field.
2.  Any user request to create, modify, or delete registry keys **MUST** be classified as a `post_install_action` and structured as a list of objects as shown in the examples.

**MANDATORY EXECUTABLE PREDICTIONS**:
- If the `Name` contains "Google Chrome" or "Chrome", you **MUST** return `["chrome.exe"]`.
- If the `Name` contains "Mozilla Firefox" or "Firefox", you **MUST** return `["firefox.exe"]`.
- If the `Name` contains "VLC Media Player" or "VLC", you **MUST** return `["vlc.exe"]`.
- If the `Name` contains "7-Zip", you **MUST** return `["7zFM.exe"]`.
- If the `Name` contains "Adobe Acrobat" or "Acrobat", you **MUST** return `["AcroRd32.exe", "Acrobat.exe"]`.
- If the `Name` contains "Microsoft Office" or "Office", you **MUST** return `["winword.exe", "excel.exe", "powerpnt.exe", "outlook.exe"]`.
- If the `Name` contains "Notepad++", you **MUST** return `["notepad++.exe"]`.

**IMPORTANT**: Even if the exact application name doesn't match the examples above, you should still attempt to predict the most likely executable name based on the application name. For example, if the name is "MyCustomApp", predict `["mycustomapp.exe"]` or similar.

This is a mandatory step and cannot be skipped.
