"""Test dependency management setup."""

import os
from pathlib import Path


def test_requirements_files_exist():
    """Test that requirements files exist for pip-tools dependency management."""
    root_path = Path(__file__).parent.parent

    # Check that requirements.in exists
    requirements_in = root_path / "requirements.in"
    assert requirements_in.exists(), "requirements.in file should exist"

    # Check that requirements.txt exists (generated by pip-compile)
    requirements_txt = root_path / "requirements.txt"
    assert requirements_txt.exists(), (
        "requirements.txt file should exist (generated by pip-compile)"
    )

    # Check that requirements.txt contains expected dependencies
    content = requirements_txt.read_text()
    expected_deps = ["pytest", "ruff", "mypy", "black", "pre-commit", "sphinx"]

    for dep in expected_deps:
        assert dep in content, f"Dependency '{dep}' should be in requirements.txt"


def test_requirements_txt_is_compiled():
    """Test that requirements.txt appears to be compiled by pip-compile."""
    root_path = Path(__file__).parent.parent
    requirements_txt = root_path / "requirements.txt"

    if requirements_txt.exists():
        content = requirements_txt.read_text()
        assert "autogenerated by pip-compile" in content, (
            "requirements.txt should be generated by pip-compile"
        )
        assert "pip-compile requirements.in" in content, (
            "requirements.txt should reference requirements.in"
        )
